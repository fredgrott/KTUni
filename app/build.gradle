apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'
apply plugin: "io.gitlab.arturbosch.detekt"

apply plugin: "com.diffplug.gradle.spotless"
apply plugin: 'jacoco'
/*
    Copyright 2018 Fred Grott

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
def myconfigurations = rootProject.ext.configurations;
def mylibraries = rootProject.ext.libraries;
jacoco {
    toolVersion = '0.8.0'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}


android {
    compileSdkVersion myconfigurations.compileSdkVersion
    buildToolsVersion myconfigurations.buildToolsVersion
    defaultConfig {
        applicationId myconfigurations.appIdName
        minSdkVersion myconfigurations.minSdkVersion
        targetSdkVersion myconfigurations.targetSdkVersion
        versionCode rootProject.ext.myVersionCode
        versionName rootProject.ext.myVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            buildConfigField("String", "GIT_HASH", rootProject.ext.gitSha)
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}
detekt {
    version = "1.0.0.RC8"
    defaultProfile {
        input = "$projectDir/src/main/java"
        config = "$projectDir/default-detekt-config.yml"
        filters = ".*/resources/.*,.*/tmp/.*"
        output = "$projectDir/build/reports/detekt"
        baseline = file("$projectDir/build/reports/baseline.xml")
    }
}
spotless {
    kotlin {
        target '**/*.kt'
        licenseHeaderFile "$rootDir/license.kt.txt"
    }
}
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [ '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*' ]
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/kotlin"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    testImplementation "junit:junit:${mylibraries.junit}"
    androidTestImplementation "com.android.support.test:runner:${mylibraries.supportTestRunnerVersion}"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${mylibraries.espressoCoreVersion}"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:${mylibraries.mockitoKotlinVersion}"
}
